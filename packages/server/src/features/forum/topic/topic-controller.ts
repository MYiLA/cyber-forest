import {
  Body,
  Controller,
  Delete,
  Example,
  Get,
  Path,
  Post,
  Produces,
  Put,
  Request,
  Response,
  Route,
  Tags,
} from 'tsoa'
import {
  TopicCreateRequest,
  TopicDto,
  TopicsSearchRequest,
} from './topic-model'
import TopicService from './topic-service'
import { CustomRequest, OK } from '../../../config/types-constants'

@Route('forum/topic')
@Tags('Forum.Topic')
@Response(400, '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å')
@Response(401, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
@Response(404, '–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
@Response(500, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
class TopicController extends Controller {
  /**
   * –í—ã–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–ø–∏–∫–æ–≤ —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã—Ö –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–∞—Ç—ã, —Ç.–µ. —Å–ø–µ—Ä–≤–∞ —Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ
   *
   * –ø–æ–ª–µ commentsQty - —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Ç–æ–ø–∏–∫—É
   *
   * –ø–æ–ª–µ emojis —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–æ–ø–∏–∫–∞
   *
   * –ù–∞–ø—Ä–∏–º–µ—Ä:
   *
   * [
   *
   *  {
   *    "emoji": "üòÇ", "qty": 3, "reacted": true
   *  }
   *
   *  {
   *    "emoji": "üò≠", "qty": 2, "reacted": false
   *  }
   *
   * ]
   *
   * –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –Ω–∞ –¥–∞–Ω–Ω–æ–º —Ç–æ–ø–∏–∫–µ üòÇ - 3 —à—Ç, –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (reacted = true), üò≠ - 2 —à—Ç, —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–∞–∫–æ–π —ç–º–æ–¥–∑–∏ –Ω–µ —Å—Ç–∞–≤–∏–ª (reacted = false)
   *
   * @summary –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–ø–∏–∫–∏ */
  @Get('/{cursor}/{limit}')
  public async getTopics(
    @Path() cursor: number,
    limit: number,
    @Request() req: CustomRequest
  ): Promise<TopicDto[]> {
    const userId = req.userId || 0
    return TopicService.getTopics({ cursor, limit }, userId)
  }

  /** @summary –ù–∞–π—Ç–∏ —Ç–æ–ø–∏–∫–∏ (–º–∞–∫—Å. 10) */
  @Post('/search')
  public async searchTopic(
    @Body() body: TopicsSearchRequest
  ): Promise<TopicDto[]> {
    const { query } = body
    return TopicService.searchTopic(query)
  }

  /** @summary –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–ø–∏–∫ */
  @Post('/')
  public async addTopic(
    @Body() body: TopicCreateRequest,
    @Request() req: CustomRequest
  ): Promise<TopicDto> {
    const userId = req.userId || 0
    return TopicService.addTopic(body, userId)
  }

  /** @summary –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ø–∏–∫ */
  @Put('/{topicId}')
  @Produces('text/plain')
  @Example(OK)
  public async updateTopic(
    @Body() body: TopicCreateRequest,
    @Path() topicId: number
  ): Promise<OK> {
    return TopicService.updateTopic(body, topicId)
  }

  /** @summary –£–¥–∞–ª–∏—Ç—å —Ç–æ–ø–∏–∫ */
  @Delete('/{topicId}')
  @Produces('text/plain')
  @Example(OK)
  public async removeTopic(@Path() topicId: number): Promise<OK> {
    return TopicService.removeTopic(topicId)
  }
}

export default new TopicController()
